#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/config/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/docker-options/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/ps/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/storage/functions"

tailscale_up() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  local authkey="$(config_get --global TS_AUTHKEY)"
  [[ -z "$authkey" ]] && dokku_log_fail "Set the TS_AUTHKEY with dokku config:set --global"

  # create state dir
  local storage_directory="${DOKKU_LIB_ROOT}/data/storage/ts_${APP}"
  dokku_log_info1 "Ensuring ${storage_directory} exists"
  mkdir -p "${storage_directory}"

  # create network
  dokku_log_info1 "creating network ${APP}"
  "$DOCKER_BIN" network create "${APP}"

  # set the app container's network mode to share the space with tailscale
  dokku_log_info1 "settings docker-option for ${APP} to --network=container:ts-${APP}"
  phases="$(get_phases 'deploy')"
  add_passed_docker_option phases[@] "--network container:ts-${APP}"

  # start tailscale
  dokku_log_info1 "starting tailscale container ts-${APP}"
  "$DOCKER_BIN" container run \
    "--label=com.dokku.app-name=${APP}" \
    $DOKKU_GLOBAL_RUN_ARGS \
    --name "ts-${APP}" \
    --hostname "${APP}" \
    --env TS_AUTHKEY="${authkey}" \
    --env TS_EXTRA_ARGS="--advertise-tags=tag:dokku" \
    --env TS_STATE_DIR=/var/lib/tailscale \
    --volume "${storage_directory}":/var/lib/tailscale \
    --volume /dev/net/tun:/dev/net/tun \
    --cap-add=NET_ADMIN \
    --cap-add=SYS_MODULE \
    --restart unless-stopped \
    --network "${APP}" \
    --detach \
    tailscale/tailscale:latest
}

tailscale_down() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  # remove docker network
  dokku_log_info1 "removing network ${APP}"
  "$DOCKER_BIN" network rm "${APP}" || true

  # does not remove the state directory.
  # unfortunately, tailscale runs as root in its containers, and the ownership
  # of files and directories in the state dir end up as root, and the dokku
  # user can't remove them.
  # would love if there was a better solution for this, but, it shouldn't
  # really matter, as far as I understand the tailscale state, if it gets
  # reused...
}

tailscale_serve_start() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  "$DOCKER_BIN" exec -it "ts-${APP}" tailscale serve --bg "$PORT"
  dokku_log_info1 "started serving traffic for ${APP} :${PORT} -> :443"
}

tailscale_serve_stop() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  "$DOCKER_BIN" exec -it "ts-${APP}" tailscale serve --https=443 off
  dokku_log_info1 "stopped serving traffic for ${APP} on :443"
}

tailscale_is_running_for_app() {
  # If there's a tailscale container running for this app, return the name of
  # the tailscale container.
  #
  # Callers can use the output by checking if it's empty. An empty output means
  # that the container is not found.
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  "$DOCKER_BIN" ps --filter "name=ts-${APP}" --format "{{.Names}}"
}

tailscale_serve_url() {
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  output=$("$DOCKER_BIN" exec -it "ts-${APP}" tailscale serve status)
  if [[ "$(echo $output | tr -d '[:space:]')" != "Noserveconfig" ]]; then
    echo $output | head -n 1 | cut -d ' ' -f 1 | tr -d '[:space:]'
  fi
}
